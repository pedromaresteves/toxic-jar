{"version":3,"sources":["logo.svg","firebase/firestoreCalls.js","firebase/init-firebase.js","components/User.js","components/Money.js","components/Modal.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","db","require","getUsers","callback","usersFromDB","collection","orderBy","get","then","querySnapshot","docs","forEach","doc","push","data","result","updateUsers","userName","debt","where","userToUpdate","id","currentUserDebt","update","clearDebt","users","userNames","map","item","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","User","props","handleClick","e","selectedUserName","target","value","usersDivs","document","querySelectorAll","selectedInputParent","parentNode","classList","remove","children","add","handleUserClick","handleClearClick","className","key","type","name","onClick","htmlFor","toFixed","Money","preventDefault","selectedValue","moneyBtns","selectedButton","handleAmountClick","Modal","show","style","position","top","bottom","left","right","backgroundColor","padding","borderRadius","margin","userData","onClose","App","state","selectedAmount","totalAmount","disableSubmitBtn","isModalOpen","bind","handleInsertBtn","enableSubmit","toggleModal","setState","this","Number","selectedUserInput","querySelector","selectedAmountButton","parentElement","checked","user","selUser","selAmount","arrToSend","length","clearUserDebt","src","logo","alt","disabled","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e239ada8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","const initFirebase = require('./init-firebase');\r\nconst db = initFirebase.db;\r\n\r\nfunction getUsers(callback) {\r\n    const usersFromDB = [];\r\n    db.collection('prueba').orderBy('userName').get().then((querySnapshot) => {\r\n        querySnapshot.docs.forEach((doc) => {\r\n        usersFromDB.push(doc.data());\r\n      });\r\n      return usersFromDB;\r\n    }).then(result => callback(result));\r\n  }\r\n\r\n  function updateUsers(userName, debt) {\r\n    db.collection('prueba').where('userName', '==', userName).get().then((querySnapshot) => {\r\n      const userToUpdate = db.collection('prueba').doc(querySnapshot.docs[0].id);\r\n      const currentUserDebt = querySnapshot.docs[0].data().debt;\r\n      userToUpdate.update({debt: currentUserDebt + debt})\r\n      });\r\n    }\r\n\r\n  function clearDebt(users) {\r\n    const userNames = users.map(item => item.userName);\r\n    db.collection('prueba').get().then((querySnapshot) => {\r\n      querySnapshot.docs.forEach((doc) => {\r\n        userNames.forEach(item => {\r\n          if(doc.data().userName === item){\r\n            const userToBeCleared = db.collection('prueba').doc(doc.id);\r\n            userToBeCleared.update({debt: 0})\r\n          }\r\n        });\r\n      });\r\n    });\r\n  }\r\n  \r\nmodule.exports = {\r\n  getUsers: getUsers,\r\n  updateUsers: updateUsers,\r\n  clearDebt: clearDebt\r\n}","const firebase = require(\"firebase/app\");\r\nrequire('firebase/firestore');\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDM9EuZwEyYTCS7obD6QSgUhI_69C-GHpk\",\r\n  authDomain: \"toxic-jar-api.firebaseapp.com\",\r\n  databaseURL: \"https://toxic-jar-api.firebaseio.com\",\r\n  projectId: \"toxic-jar-api\",\r\n  storageBucket: \"toxic-jar-api.appspot.com\",\r\n  messagingSenderId: \"951909825290\",\r\n  appId: \"1:951909825290:web:72d8a1c10fab4c206a18f3\",\r\n  measurementId: \"G-1QFET2KR4E\"\r\n  };\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n//firebase.analytics();\r\nconst db = firebase.firestore();\r\n\r\nmodule.exports = {db: db};","import React from 'react';\r\nimport '../App.css';\r\n\r\nfunction User(props) {\r\n    function handleClick(e){\r\n      const selectedUserName = e.target.value;\r\n      const usersDivs = document.querySelectorAll('.users div');\r\n      const selectedInputParent = e.target.parentNode;\r\n      usersDivs.forEach(item => {\r\n        item.classList.remove('user-selected')\r\n        item.children[2].classList.add('hide')\r\n      })\r\n      selectedInputParent.classList.add('user-selected');\r\n      selectedInputParent.children[2].classList.remove('hide')\r\n      props.handleUserClick(selectedUserName)\r\n    }\r\n\r\n    function handleClearClick(e){\r\n      const selectedUserName = e.target.parentNode.parentNode.parentNode.children[0].value;\r\n      props.handleClearClick(e, selectedUserName);\r\n    }\r\n\r\n      return(\r\n      <div className='users'>\r\n          {props.users.map((item, key) => {\r\n              return (<div className='test' key={key}>\r\n                <input type='radio' id={key} name='user' value={item.userName} onClick={handleClick}/>\r\n                <label htmlFor={key}>{item.userName}</label>\r\n                {item.debt ? <p className='userDebt hide'><small>This fat fuck owes {item.debt.toFixed(2)} € <button className='clearUserDebt' onClick={handleClearClick}>Clear Debt</button></small></p> : <p className='empty'></p>}\r\n                </div>)\r\n          })}\r\n      </div>\r\n      )\r\n    }\r\n\r\nexport default User;","import React from 'react';\r\nimport '../App.css';\r\n\r\nfunction Money(props) {\r\n    function handleClick(e){\r\n      e.preventDefault();\r\n      const selectedValue = e.target.value;\r\n      const moneyBtns = document.querySelectorAll('.money button');\r\n      const selectedButton = e.target;\r\n      moneyBtns.forEach(item => {item.classList.remove('amount-selected')})\r\n      selectedButton.classList.add('amount-selected')\r\n      props.handleAmountClick(selectedValue)\r\n    }\r\n    return(\r\n    <div className='money'>\r\n        <button onClick={handleClick} value='0.25'>0.25€</button>\r\n        <button onClick={handleClick} value='0.5'>0.50€</button>\r\n        <button onClick={handleClick} value='1'>1.00€</button>\r\n    </div>\r\n    )\r\n  }\r\n\r\nexport default Money;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Modal(props) {\r\n    // Render nothing if the \"show\" prop is false\r\n    if(!props.show) {\r\n      return null;\r\n    }\r\n\r\n    // The gray background\r\n    const backdropStyle = {\r\n      position: 'fixed',\r\n      top: 0,\r\n      bottom: 0,\r\n      left: 0,\r\n      right: 0,\r\n      backgroundColor: 'rgba(0,0,0,0.3)',\r\n      padding: 50\r\n    };\r\n\r\n    // The modal \"window\"\r\n    const modalStyle = {\r\n      backgroundColor: '#fff',\r\n      borderRadius: 5,\r\n      margin: '0 auto',\r\n      padding: 30\r\n    };\r\n\r\n    return (\r\n      <div className='backdrop' style={backdropStyle}>\r\n        <div className='modal' style={modalStyle}>\r\n          <h2>This is how much each of you pieces of shit owe:</h2>\r\n          <ul className='modalUserList'>\r\n            {props.userData.map((item, key) => {\r\n                return <li key={key}>{item.userName} - {item.debt.toFixed(2)} €</li>\r\n            })}\r\n          </ul>\r\n          <div className='footer'>\r\n            <button onClick={props.onClose}>\r\n              Close\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nModal.propTypes = {\r\n  onClose: PropTypes.func.isRequired,\r\n  show: PropTypes.bool,\r\n};\r\n\r\nexport default Modal;","import React from 'react';\r\nimport logo from '../logo.svg';\r\nimport '../App.css';\r\nimport User from './User'\r\nimport Money from './Money'\r\nimport Modal from './Modal'\r\nconst firestore = require('../firebase/firestoreCalls')\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        users : [],\r\n        selectedUserName: null,\r\n        selectedAmount: null,\r\n        totalAmount: 0,\r\n        disableSubmitBtn: true,\r\n        isModalOpen: false,\r\n      }\r\n\r\n      this.handleUserClick = this.handleUserClick.bind(this);\r\n      this.handleAmountClick = this.handleAmountClick.bind(this);\r\n      this.handleInsertBtn = this.handleInsertBtn.bind(this);\r\n      this.enableSubmit = this.enableSubmit.bind(this);\r\n      this.toggleModal = this.toggleModal.bind(this);\r\n      this.handleClearClick = this.handleClearClick.bind(this);\r\n    }\r\n  \r\n  componentDidMount() {\r\n    firestore.getUsers(result => {\r\n      let totalAmount = 0;\r\n      result.forEach(item => totalAmount += item.debt)\r\n      this.setState({\r\n        users: result,\r\n        totalAmount: totalAmount\r\n      })\r\n    });\r\n  }\r\n\r\n    handleUserClick(data){\r\n      this.setState({\r\n        selectedUserName: data\r\n      }, ()=>{\r\n        this.enableSubmit();\r\n      });\r\n    }\r\n\r\n    handleAmountClick(data){\r\n      this.setState({\r\n        selectedAmount: data\r\n      }, ()=>{\r\n        this.enableSubmit();\r\n      });\r\n    }\r\n\r\n    handleInsertBtn(e){\r\n      e.preventDefault();\r\n      const selectedUserName = this.state.selectedUserName;\r\n      const selectedAmount = Number(this.state.selectedAmount);\r\n      let totalAmount = Number(this.state.totalAmount);\r\n      const users = this.state.users;\r\n      const selectedUserInput = document.querySelector(`input[value=\"${selectedUserName}\"]`);\r\n      const selectedAmountButton = document.querySelector(`button[value=\"${selectedAmount}\"]`);\r\n      selectedUserInput.parentElement.classList.remove('user-selected')\r\n      selectedAmountButton.classList.remove('amount-selected')\r\n      selectedUserInput.checked = false;\r\n      users.forEach(user => {\r\n        if(user.userName === selectedUserName){\r\n          user.debt += selectedAmount;\r\n          totalAmount += selectedAmount;\r\n        }\r\n      });\r\n      firestore.updateUsers(selectedUserName, selectedAmount)\r\n      this.setState({\r\n        users: users,\r\n        totalAmount: totalAmount,\r\n        selectedUserName: null,\r\n        selectedAmount: null,\r\n        disableSubmitBtn: true\r\n      });\r\n    }\r\n\r\n    enableSubmit(){\r\n      const result = shouldSubmitBtnRemainDisabled(this.state.selectedUserName, this.state.selectedAmount);\r\n      this.setState({\r\n        disableSubmitBtn: result\r\n      })\r\n    }\r\n\r\n    toggleModal(e){\r\n      e.preventDefault();\r\n      this.setState({\r\n        isModalOpen: !this.state.isModalOpen\r\n      });\r\n    }\r\n\r\n    clearUserDebt(selectedUserName){\r\n      let totalAmount = this.state.totalAmount;\r\n      const users = this.state.users;\r\n      var arrToSend = (selectedUserName) ? selectedUserName : users;\r\n      firestore.clearDebt(arrToSend);\r\n      users.forEach(user =>{\r\n        if(arrToSend.length > 1){\r\n          totalAmount -= user.debt;\r\n          user.debt = 0;\r\n        } else{\r\n          if(user.userName === selectedUserName[0].userName){\r\n            totalAmount -= user.debt;\r\n            user.debt = 0;\r\n          }\r\n        }\r\n      });\r\n      this.setState({\r\n        users: users,\r\n        totalAmount: totalAmount\r\n      })\r\n    }\r\n\r\n    handleClearClick(e, selectedUserName){\r\n      e.preventDefault();\r\n      const users = this.state.users;\r\n      if(!selectedUserName) return this.clearUserDebt();\r\n      users.forEach(user => {\r\n        if(user.userName === selectedUserName){\r\n          return this.clearUserDebt([user]);\r\n        }\r\n      });\r\n    }\r\n\r\n    render() {\r\n      return (\r\n        <div className=\"App\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <h1>QA TEAM</h1>\r\n          <button id='moreInfo' onClick={this.toggleModal}><small>Click to see more info</small></button>\r\n          <form>\r\n            <h1 id='totalAmount'>Total debt: {this.state.totalAmount.toFixed(2)} €</h1>\r\n            <button id='clearAllDebt' onClick={this.handleClearClick}><small>Clear all debt</small></button>\r\n            <Modal show={this.state.isModalOpen}\r\n              onClose={this.toggleModal} userData={this.state.users}>\r\n            </Modal>\r\n            <p>Please select the toxic user:</p>\r\n            <User users={this.state.users} handleUserClick={this.handleUserClick} handleClearClick={this.handleClearClick}/>\r\n            <Money handleAmountClick={this.handleAmountClick} />\r\n            <div>\r\n              <button id='sendButton' onClick={this.handleInsertBtn} disabled={this.state.disableSubmitBtn}>Submit</button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n\r\nfunction shouldSubmitBtnRemainDisabled(selUser, selAmount){\r\n  if(selUser && selAmount) return false;\r\n  return true;\r\n}\r\n\r\nexport {\r\n  App,\r\n  shouldSubmitBtnRemainDisabled\r\n};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { App } from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}