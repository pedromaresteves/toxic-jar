{"version":3,"sources":["components/User.js","components/Money.js","components/Modal.js","components/App.js","serviceWorker.js","index.js","logo.svg"],"names":["User","props","handleClick","e","selectedUser","target","value","usersDivs","document","querySelectorAll","selectedInputParent","parentNode","forEach","item","classList","remove","add","handleUserClick","className","users","map","key","type","id","name","onClick","htmlFor","Money","preventDefault","selectedValue","moneyBtns","selectedButton","handleAmountClick","Modal","show","style","position","top","bottom","left","right","backgroundColor","padding","borderRadius","margin","userData","debt","toFixed","onClose","App","state","selectedAmount","totalAmount","disableSubmitBtn","isModalOpen","bind","handleInsertBtn","enableSubmit","toggleModal","data","this","setState","Number","selectedUserInput","querySelector","selectedAmountButton","parentElement","checked","user","selUser","selAmount","result","src","logo","alt","disabled","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.aa7e73f4.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../App.css';\r\n\r\nfunction User(props) {\r\n    function handleClick(e){\r\n      const selectedUser = e.target.value;\r\n      const usersDivs = document.querySelectorAll('.users div');\r\n      const selectedInputParent = e.target.parentNode;\r\n      usersDivs.forEach(item => {item.classList.remove('user-selected')})\r\n      selectedInputParent.classList.add('user-selected')\r\n      props.handleUserClick(selectedUser)\r\n    }\r\n\r\n      return(\r\n      <div className='users'>\r\n          {props.users.map((item, key) => {\r\n              return <div className='test' key={key}><input type='radio' id={key} name='user' value={item.name} onClick={handleClick}/><label htmlFor={key}>{item.name}</label></div>\r\n          })}\r\n      </div>\r\n      )\r\n    }\r\n\r\nexport default User;","import React from 'react';\r\nimport '../App.css';\r\n\r\nfunction Money(props) {\r\n    function handleClick(e){\r\n      e.preventDefault();\r\n      const selectedValue = e.target.value;\r\n      const moneyBtns = document.querySelectorAll('.money button');\r\n      const selectedButton = e.target;\r\n      moneyBtns.forEach(item => {item.classList.remove('amount-selected')})\r\n      selectedButton.classList.add('amount-selected')\r\n      props.handleAmountClick(selectedValue)\r\n    }\r\n    return(\r\n    <div className='money'>\r\n        <button onClick={handleClick} value='0.25'>0.25€</button>\r\n        <button onClick={handleClick} value='0.5'>0.50€</button>\r\n        <button onClick={handleClick} value='1'>1.00€</button>\r\n    </div>\r\n    )\r\n  }\r\n\r\nexport default Money;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Modal(props) {\r\n    // Render nothing if the \"show\" prop is false\r\n    if(!props.show) {\r\n      return null;\r\n    }\r\n\r\n    // The gray background\r\n    const backdropStyle = {\r\n      position: 'fixed',\r\n      top: 0,\r\n      bottom: 0,\r\n      left: 0,\r\n      right: 0,\r\n      backgroundColor: 'rgba(0,0,0,0.3)',\r\n      padding: 50\r\n    };\r\n\r\n    // The modal \"window\"\r\n    const modalStyle = {\r\n      backgroundColor: '#fff',\r\n      borderRadius: 5,\r\n      margin: '0 auto',\r\n      padding: 30\r\n    };\r\n\r\n    return (\r\n      <div className='backdrop' style={backdropStyle}>\r\n        <div className='modal' style={modalStyle}>\r\n          <h2>This is how much each of you pieces of shit owe:</h2>\r\n          <ul className='modalUserList'>\r\n            {props.userData.map((item, key) => {\r\n                return <li key={key}>{item.name} - {item.debt.toFixed(2)} €</li>\r\n            })}\r\n          </ul>\r\n          <div className='footer'>\r\n            <button onClick={props.onClose}>\r\n              Close\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nModal.propTypes = {\r\n  onClose: PropTypes.func.isRequired,\r\n  show: PropTypes.bool,\r\n};\r\n\r\nexport default Modal;","import React from 'react';\r\nimport logo from '../logo.svg';\r\nimport '../App.css';\r\nimport User from './User'\r\nimport Money from './Money'\r\nimport Modal from './Modal'\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        users : [\r\n            {\r\n                name: `David Cozar`,\r\n                debt: 0\r\n            },\r\n            {\r\n                name: `Pedro Marques`,\r\n                debt: 0\r\n            },\r\n            {\r\n                name: `Rafael Casado`,\r\n                debt: 0\r\n            },\r\n            {\r\n                name: `Raúl 'El Papo' Hernandez`,\r\n                debt: 0\r\n            }\r\n        ],\r\n        selectedUser: null,\r\n        selectedAmount: null,\r\n        totalAmount: 0,\r\n        disableSubmitBtn: true,\r\n        isModalOpen: false\r\n      }\r\n\r\n      this.handleUserClick = this.handleUserClick.bind(this);\r\n      this.handleAmountClick = this.handleAmountClick.bind(this);\r\n      this.handleInsertBtn = this.handleInsertBtn.bind(this);\r\n      this.enableSubmit = this.enableSubmit.bind(this);\r\n      this.toggleModal = this.toggleModal.bind(this);\r\n    }\r\n\r\n    handleUserClick(data){\r\n      this.setState({\r\n        selectedUser: data\r\n      }, ()=>{\r\n        this.enableSubmit();\r\n      });\r\n    }\r\n\r\n    handleAmountClick(data){\r\n      this.setState({\r\n        selectedAmount: data\r\n      }, ()=>{\r\n        this.enableSubmit();\r\n      });\r\n    }\r\n\r\n    handleInsertBtn(e){\r\n      e.preventDefault();\r\n      const selectedUser = this.state.selectedUser;\r\n      const selectedAmount = Number(this.state.selectedAmount);\r\n      let totalAmount = Number(this.state.totalAmount);\r\n      const users = this.state.users;\r\n      const selectedUserInput = document.querySelector(`input[value=\"${selectedUser}\"]`);\r\n      const selectedAmountButton = document.querySelector(`button[value=\"${selectedAmount}\"]`);\r\n      selectedUserInput.parentElement.classList.remove('user-selected')\r\n      selectedAmountButton.classList.remove('amount-selected')\r\n      selectedUserInput.checked = false;\r\n      users.forEach(user => {\r\n        if(user.name === selectedUser){\r\n          user.debt += selectedAmount;\r\n          totalAmount += selectedAmount;\r\n        }\r\n      });\r\n      this.setState({\r\n        users: users,\r\n        totalAmount: totalAmount.toFixed(2),\r\n        selectedUser: null,\r\n        selectedAmount: null,\r\n        disableSubmitBtn: true\r\n      });\r\n    }\r\n\r\n    enableSubmit(){\r\n      const result = checkSubmitBtnState(this.state.selectedUser, this.state.selectedAmount);\r\n      this.setState({\r\n        disableSubmitBtn: result\r\n      })\r\n    }\r\n\r\n    toggleModal(e){\r\n      e.preventDefault();\r\n      this.setState({\r\n        isModalOpen: !this.state.isModalOpen\r\n      });\r\n    }\r\n\r\n    render() {\r\n      return (\r\n        <div className=\"App\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <h1>QA TEAM</h1>\r\n          <form>\r\n            <h1 id='totalAmount'>Total debt: {this.state.totalAmount} €</h1>\r\n            <button id='moreInfo' onClick={this.toggleModal}><small>Click to see more info</small></button>\r\n            <Modal show={this.state.isModalOpen}\r\n              onClose={this.toggleModal} userData={this.state.users}>\r\n            </Modal>\r\n            <p>Please select the toxic user:</p>\r\n            <User users={this.state.users} handleUserClick={this.handleUserClick} />\r\n            <Money handleAmountClick={this.handleAmountClick} />\r\n            <div>\r\n              <button id='sendButton' onClick={this.handleInsertBtn} disabled={this.state.disableSubmitBtn}>Submit</button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\nexport default App;\r\n\r\n\r\nfunction checkSubmitBtnState(selUser, selAmount){\r\n  if(selUser && selAmount) return false;\r\n  return true;\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}