{"version":3,"sources":["logo.svg","firebase/init-firebase.js","components/User.js","components/Money.js","components/Modal.js","firebase/firestoreCalls.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","require","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","User","props","handleClick","e","selectedUser","target","value","usersDivs","document","querySelectorAll","selectedInputParent","parentNode","forEach","item","classList","remove","add","handleUserClick","className","users","map","key","type","id","name","userName","onClick","htmlFor","Money","preventDefault","selectedValue","moneyBtns","selectedButton","handleAmountClick","Modal","show","style","position","top","bottom","left","right","backgroundColor","padding","borderRadius","margin","userData","debt","toFixed","onClose","getUsers","callback","usersFromDB","collection","orderBy","get","then","querySnapshot","docs","doc","push","data","result","App","state","selectedAmount","totalAmount","disableSubmitBtn","isModalOpen","bind","handleInsertBtn","enableSubmit","toggleModal","handleClearClick","setState","this","Number","selectedUserInput","querySelector","selectedAmountButton","parentElement","checked","user","where","userToUpdate","currentUserDebt","update","selUser","selAmount","userNames","clearDebt","src","logo","alt","disabled","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.987223a1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","const firebase = require(\"firebase/app\");\r\nrequire('firebase/firestore');\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDM9EuZwEyYTCS7obD6QSgUhI_69C-GHpk\",\r\n  authDomain: \"toxic-jar-api.firebaseapp.com\",\r\n  databaseURL: \"https://toxic-jar-api.firebaseio.com\",\r\n  projectId: \"toxic-jar-api\",\r\n  storageBucket: \"toxic-jar-api.appspot.com\",\r\n  messagingSenderId: \"951909825290\",\r\n  appId: \"1:951909825290:web:72d8a1c10fab4c206a18f3\",\r\n  measurementId: \"G-1QFET2KR4E\"\r\n  };\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n//firebase.analytics();\r\nconst db = firebase.firestore();\r\n\r\nmodule.exports = {db: db};","import React from 'react';\r\nimport '../App.css';\r\n\r\nfunction User(props) {\r\n    function handleClick(e){\r\n      const selectedUser = e.target.value;\r\n      const usersDivs = document.querySelectorAll('.users div');\r\n      const selectedInputParent = e.target.parentNode;\r\n      usersDivs.forEach(item => {item.classList.remove('user-selected')})\r\n      selectedInputParent.classList.add('user-selected')\r\n      props.handleUserClick(selectedUser)\r\n    }\r\n\r\n      return(\r\n      <div className='users'>\r\n          {props.users.map((item, key) => {\r\n              return <div className='test' key={key}><input type='radio' id={key} name='user' value={item.userName} onClick={handleClick}/><label htmlFor={key}>{item.userName}</label></div>\r\n          })}\r\n      </div>\r\n      )\r\n    }\r\n\r\nexport default User;","import React from 'react';\r\nimport '../App.css';\r\n\r\nfunction Money(props) {\r\n    function handleClick(e){\r\n      e.preventDefault();\r\n      const selectedValue = e.target.value;\r\n      const moneyBtns = document.querySelectorAll('.money button');\r\n      const selectedButton = e.target;\r\n      moneyBtns.forEach(item => {item.classList.remove('amount-selected')})\r\n      selectedButton.classList.add('amount-selected')\r\n      props.handleAmountClick(selectedValue)\r\n    }\r\n    return(\r\n    <div className='money'>\r\n        <button onClick={handleClick} value='0.25'>0.25€</button>\r\n        <button onClick={handleClick} value='0.5'>0.50€</button>\r\n        <button onClick={handleClick} value='1'>1.00€</button>\r\n    </div>\r\n    )\r\n  }\r\n\r\nexport default Money;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Modal(props) {\r\n    // Render nothing if the \"show\" prop is false\r\n    if(!props.show) {\r\n      return null;\r\n    }\r\n\r\n    // The gray background\r\n    const backdropStyle = {\r\n      position: 'fixed',\r\n      top: 0,\r\n      bottom: 0,\r\n      left: 0,\r\n      right: 0,\r\n      backgroundColor: 'rgba(0,0,0,0.3)',\r\n      padding: 50\r\n    };\r\n\r\n    // The modal \"window\"\r\n    const modalStyle = {\r\n      backgroundColor: '#fff',\r\n      borderRadius: 5,\r\n      margin: '0 auto',\r\n      padding: 30\r\n    };\r\n\r\n    return (\r\n      <div className='backdrop' style={backdropStyle}>\r\n        <div className='modal' style={modalStyle}>\r\n          <h2>This is how much each of you pieces of shit owe:</h2>\r\n          <ul className='modalUserList'>\r\n            {props.userData.map((item, key) => {\r\n                return <li key={key}>{item.userName} - {item.debt.toFixed(2)} €</li>\r\n            })}\r\n          </ul>\r\n          <div className='footer'>\r\n            <button onClick={props.onClose}>\r\n              Close\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nModal.propTypes = {\r\n  onClose: PropTypes.func.isRequired,\r\n  show: PropTypes.bool,\r\n};\r\n\r\nexport default Modal;","import { db } from './init-firebase';\r\n\r\nfunction getUsers(callback) {\r\n    const usersFromDB = [];\r\n    db.collection('prueba').orderBy('userName').get().then((querySnapshot) => {\r\n        querySnapshot.docs.forEach((doc) => {\r\n        usersFromDB.push(doc.data());\r\n      });\r\n      return usersFromDB;\r\n    }).then(result => callback(result));\r\n  }\r\n\r\n  function updateUsers(userName, debt) {\r\n    db.collection('prueba').where('userName', '==', userName).get().then((querySnapshot) => {\r\n      const userToUpdate = db.collection('prueba').doc(querySnapshot.docs[0].id);\r\n      const currentUserDebt = querySnapshot.docs[0].data().debt;\r\n      userToUpdate.update({debt: currentUserDebt + debt})\r\n      });\r\n    }\r\n\r\n  function clearDebt(users) {\r\n    const userNames = users.map(item => item.userName);\r\n    db.collection('prueba').get().then((querySnapshot) => {\r\n      querySnapshot.docs.forEach((doc) => {\r\n        userNames.forEach(item => {\r\n          if(doc.data().userName === item){\r\n            const userToBeCleared = db.collection('prueba').doc(doc.id);\r\n            userToBeCleared.update({debt: 0})\r\n          }\r\n        });\r\n\r\n      });\r\n    });\r\n  }\r\n\r\nexport {\r\n    getUsers,\r\n    updateUsers,\r\n    clearDebt\r\n}","import React from 'react';\r\nimport logo from '../logo.svg';\r\nimport '../App.css';\r\nimport User from './User'\r\nimport Money from './Money'\r\nimport Modal from './Modal'\r\nimport { getUsers, updateUsers, clearDebt } from '../firebase/firestoreCalls';\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        users : [],\r\n        selectedUser: null,\r\n        selectedAmount: null,\r\n        totalAmount: 0,\r\n        disableSubmitBtn: true,\r\n        isModalOpen: false\r\n      }\r\n\r\n      this.handleUserClick = this.handleUserClick.bind(this);\r\n      this.handleAmountClick = this.handleAmountClick.bind(this);\r\n      this.handleInsertBtn = this.handleInsertBtn.bind(this);\r\n      this.enableSubmit = this.enableSubmit.bind(this);\r\n      this.toggleModal = this.toggleModal.bind(this);\r\n      this.handleClearClick = this.handleClearClick.bind(this);\r\n    }\r\n  \r\n  componentDidMount() {\r\n    getUsers(result => {\r\n      let totalAmount = 0;\r\n      result.forEach(item => totalAmount += item.debt)\r\n      this.setState({\r\n        users: result,\r\n        totalAmount: totalAmount\r\n      })\r\n    });\r\n  }\r\n\r\n    handleUserClick(data){\r\n      this.setState({\r\n        selectedUser: data\r\n      }, ()=>{\r\n        this.enableSubmit();\r\n      });\r\n    }\r\n\r\n    handleAmountClick(data){\r\n      this.setState({\r\n        selectedAmount: data\r\n      }, ()=>{\r\n        this.enableSubmit();\r\n      });\r\n    }\r\n\r\n    handleInsertBtn(e){\r\n      e.preventDefault();\r\n      const selectedUser = this.state.selectedUser;\r\n      const selectedAmount = Number(this.state.selectedAmount);\r\n      let totalAmount = Number(this.state.totalAmount);\r\n      const users = this.state.users;\r\n      const selectedUserInput = document.querySelector(`input[value=\"${selectedUser}\"]`);\r\n      const selectedAmountButton = document.querySelector(`button[value=\"${selectedAmount}\"]`);\r\n      selectedUserInput.parentElement.classList.remove('user-selected')\r\n      selectedAmountButton.classList.remove('amount-selected')\r\n      selectedUserInput.checked = false;\r\n      users.forEach(user => {\r\n        if(user.userName === selectedUser){\r\n          user.debt += selectedAmount;\r\n          totalAmount += selectedAmount;\r\n        }\r\n      });\r\n      updateUsers(selectedUser, selectedAmount)\r\n      this.setState({\r\n        users: users,\r\n        totalAmount: totalAmount,\r\n        selectedUser: null,\r\n        selectedAmount: null,\r\n        disableSubmitBtn: true\r\n      });\r\n    }\r\n\r\n    enableSubmit(){\r\n      const result = shouldSubmitBtnRemainDisabled(this.state.selectedUser, this.state.selectedAmount);\r\n      this.setState({\r\n        disableSubmitBtn: result\r\n      })\r\n    }\r\n\r\n    toggleModal(e){\r\n      e.preventDefault();\r\n      this.setState({\r\n        isModalOpen: !this.state.isModalOpen\r\n      });\r\n    }\r\n\r\n    handleClearClick(e){\r\n      e.preventDefault();\r\n      clearDebt(this.state.users);\r\n      getUsers(result => {\r\n        let totalAmount = 0;\r\n        this.setState({\r\n          users: result,\r\n          totalAmount: totalAmount\r\n        })\r\n      });\r\n    }\r\n\r\n    render() {\r\n      return (\r\n        <div className=\"App\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <h1>QA TEAM</h1>\r\n          <button id='moreInfo' onClick={this.toggleModal}><small>Click to see more info</small></button>\r\n          <form>\r\n            <h1 id='totalAmount'>Total debt: {this.state.totalAmount.toFixed(2)} €</h1>\r\n            <button id='clearAllDebt' onClick={this.handleClearClick}><small>Clear all debt</small></button>\r\n            <Modal show={this.state.isModalOpen}\r\n              onClose={this.toggleModal} userData={this.state.users}>\r\n            </Modal>\r\n            <p>Please select the toxic user:</p>\r\n            <User users={this.state.users} handleUserClick={this.handleUserClick} />\r\n            <Money handleAmountClick={this.handleAmountClick} />\r\n            <div>\r\n              <button id='sendButton' onClick={this.handleInsertBtn} disabled={this.state.disableSubmitBtn}>Submit</button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n\r\nfunction shouldSubmitBtnRemainDisabled(selUser, selAmount){\r\n  if(selUser && selAmount) return false;\r\n  return true;\r\n}\r\n\r\nexport {\r\n  App,\r\n  shouldSubmitBtnRemainDisabled\r\n};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { App } from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}